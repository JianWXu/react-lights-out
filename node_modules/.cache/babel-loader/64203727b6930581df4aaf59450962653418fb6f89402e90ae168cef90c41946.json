{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Jenny\\\\OneDrive\\\\Desktop\\\\First Project\\\\react-lights-out\\\\src\\\\Board.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction Board({\n  nrows,\n  ncols,\n  chanceLightStartsOn\n}) {\n  _s();\n  const [board, setBoard] = useState(createBoard());\n  // const [isGameWon, setIsGameWon] = useState(false);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    // TODO: create array-of-arrays of true/false values\n\n    let initialBoard = Array(nrows).fill(null).map(() => Array(ncols).fill(false)); // Initialize all cells to false\n\n    // Randomly set some cells to true based on chanceLightStartsOn\n    initialBoard = initialBoard.map(row => row.map(() => Math.random() >= chanceLightStartsOn));\n    return initialBoard;\n  }\n  function hasWon() {\n    // Check if board is defined before accessing its properties\n    if (!board) {\n      return false;\n    }\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(value => value === false));\n  }\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      if (typeof coord !== \"string\") {\n        console.error(\"Error: coord is not a string:\", coord);\n        return coord.to; // Exit the function early\n      }\n      const [y, x] = coord.split(\"-\").map(Number);\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const copyOldBoard = oldBoard.map(a => [...a]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, copyOldBoard);\n      flipCell(y + 1, x, copyOldBoard);\n      flipCell(y - 1, x, copyOldBoard);\n      flipCell(y, x + 1, copyOldBoard);\n      flipCell(y, x - 1, copyOldBoard);\n\n      // TODO: return the copy\n      return copyOldBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  if (hasWon()) {\n    return /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Congratulations! You won!\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)\n    }, void 0, false);\n  }\n  // TODO\n\n  // make table board\n\n  return /*#__PURE__*/_jsxDEV(\"table\", {\n    children: /*#__PURE__*/_jsxDEV(\"tbody\", {\n      children: board.map((row, rowIndex) => /*#__PURE__*/_jsxDEV(\"tr\", {\n        children: row.map((cell, colIndex) => /*#__PURE__*/_jsxDEV(Cell, {\n          flipCellsAroundMe: flipCellsAround,\n          isLit: cell\n          // coord={`${rowIndex}-${colIndex}`}\n        }, colIndex, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 15\n        }, this))\n      }, rowIndex, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 105,\n    columnNumber: 5\n  }, this);\n\n  // TODO\n}\n_s(Board, \"yXCiZuNsR4bhCVCHatAq6sPGYak=\");\n_c = Board;\nexport default Board;\nvar _c;\n$RefreshReg$(_c, \"Board\");","map":{"version":3,"names":["React","useState","Cell","jsxDEV","_jsxDEV","Fragment","_Fragment","Board","nrows","ncols","chanceLightStartsOn","_s","board","setBoard","createBoard","initialBoard","Array","fill","map","row","Math","random","hasWon","every","value","flipCellsAround","coord","oldBoard","console","error","to","y","x","split","Number","flipCell","boardCopy","copyOldBoard","a","children","fileName","_jsxFileName","lineNumber","columnNumber","rowIndex","cell","colIndex","flipCellsAroundMe","isLit","_c","$RefreshReg$"],"sources":["C:/Users/Jenny/OneDrive/Desktop/First Project/react-lights-out/src/Board.js"],"sourcesContent":["import React, { useState } from \"react\";\nimport Cell from \"./Cell\";\nimport \"./Board.css\";\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nfunction Board({ nrows, ncols, chanceLightStartsOn }) {\n  const [board, setBoard] = useState(createBoard());\n  // const [isGameWon, setIsGameWon] = useState(false);\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit */\n  function createBoard() {\n    // TODO: create array-of-arrays of true/false values\n\n    let initialBoard = Array(nrows)\n      .fill(null)\n      .map(() => Array(ncols).fill(false)); // Initialize all cells to false\n\n    // Randomly set some cells to true based on chanceLightStartsOn\n    initialBoard = initialBoard.map(row =>\n      row.map(() => Math.random() >= chanceLightStartsOn)\n    );\n\n    return initialBoard;\n  }\n\n  function hasWon() {\n    // Check if board is defined before accessing its properties\n    if (!board) {\n      return false;\n    }\n    // TODO: check the board in state to determine whether the player has won.\n    return board.every(row => row.every(value => value === false));\n  }\n\n  function flipCellsAround(coord) {\n    setBoard(oldBoard => {\n      if (typeof coord !== \"string\") {\n        console.error(\"Error: coord is not a string:\", coord);\n        return coord.to; // Exit the function early\n      }\n      const [y, x] = coord.split(\"-\").map(Number);\n\n      const flipCell = (y, x, boardCopy) => {\n        // if this coord is actually on board, flip it\n\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          boardCopy[y][x] = !boardCopy[y][x];\n        }\n      };\n\n      // TODO: Make a (deep) copy of the oldBoard\n      const copyOldBoard = oldBoard.map(a => [...a]);\n\n      // TODO: in the copy, flip this cell and the cells around it\n\n      flipCell(y, x, copyOldBoard);\n      flipCell(y + 1, x, copyOldBoard);\n      flipCell(y - 1, x, copyOldBoard);\n      flipCell(y, x + 1, copyOldBoard);\n      flipCell(y, x - 1, copyOldBoard);\n\n      // TODO: return the copy\n      return copyOldBoard;\n    });\n  }\n\n  // if the game is won, just show a winning msg & render nothing else\n\n  if (hasWon()) {\n    return (\n      <>\n        <h1>Congratulations! You won!</h1>\n      </>\n    );\n  }\n  // TODO\n\n  // make table board\n\n  return (\n    <table>\n      <tbody>\n        {board.map((row, rowIndex) => (\n          <tr key={rowIndex}>\n            {row.map((cell, colIndex) => (\n              <Cell\n                key={colIndex}\n                flipCellsAroundMe={flipCellsAround}\n                isLit={cell}\n                // coord={`${rowIndex}-${colIndex}`}\n              />\n            ))}\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n\n  // TODO\n}\n\nexport default Board;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAOC,IAAI,MAAM,QAAQ;AACzB,OAAO,aAAa;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAvBA,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAyBA,SAASC,KAAKA,CAAC;EAAEC,KAAK;EAAEC,KAAK;EAAEC;AAAoB,CAAC,EAAE;EAAAC,EAAA;EACpD,MAAM,CAACC,KAAK,EAAEC,QAAQ,CAAC,GAAGZ,QAAQ,CAACa,WAAW,CAAC,CAAC,CAAC;EACjD;;EAEA;EACA,SAASA,WAAWA,CAAA,EAAG;IACrB;;IAEA,IAAIC,YAAY,GAAGC,KAAK,CAACR,KAAK,CAAC,CAC5BS,IAAI,CAAC,IAAI,CAAC,CACVC,GAAG,CAAC,MAAMF,KAAK,CAACP,KAAK,CAAC,CAACQ,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;;IAExC;IACAF,YAAY,GAAGA,YAAY,CAACG,GAAG,CAACC,GAAG,IACjCA,GAAG,CAACD,GAAG,CAAC,MAAME,IAAI,CAACC,MAAM,CAAC,CAAC,IAAIX,mBAAmB,CACpD,CAAC;IAED,OAAOK,YAAY;EACrB;EAEA,SAASO,MAAMA,CAAA,EAAG;IAChB;IACA,IAAI,CAACV,KAAK,EAAE;MACV,OAAO,KAAK;IACd;IACA;IACA,OAAOA,KAAK,CAACW,KAAK,CAACJ,GAAG,IAAIA,GAAG,CAACI,KAAK,CAACC,KAAK,IAAIA,KAAK,KAAK,KAAK,CAAC,CAAC;EAChE;EAEA,SAASC,eAAeA,CAACC,KAAK,EAAE;IAC9Bb,QAAQ,CAACc,QAAQ,IAAI;MACnB,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;QAC7BE,OAAO,CAACC,KAAK,CAAC,+BAA+B,EAAEH,KAAK,CAAC;QACrD,OAAOA,KAAK,CAACI,EAAE,CAAC,CAAC;MACnB;MACA,MAAM,CAACC,CAAC,EAAEC,CAAC,CAAC,GAAGN,KAAK,CAACO,KAAK,CAAC,GAAG,CAAC,CAACf,GAAG,CAACgB,MAAM,CAAC;MAE3C,MAAMC,QAAQ,GAAGA,CAACJ,CAAC,EAAEC,CAAC,EAAEI,SAAS,KAAK;QACpC;;QAEA,IAAIJ,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGvB,KAAK,IAAIsB,CAAC,IAAI,CAAC,IAAIA,CAAC,GAAGvB,KAAK,EAAE;UAC9C4B,SAAS,CAACL,CAAC,CAAC,CAACC,CAAC,CAAC,GAAG,CAACI,SAAS,CAACL,CAAC,CAAC,CAACC,CAAC,CAAC;QACpC;MACF,CAAC;;MAED;MACA,MAAMK,YAAY,GAAGV,QAAQ,CAACT,GAAG,CAACoB,CAAC,IAAI,CAAC,GAAGA,CAAC,CAAC,CAAC;;MAE9C;;MAEAH,QAAQ,CAACJ,CAAC,EAAEC,CAAC,EAAEK,YAAY,CAAC;MAC5BF,QAAQ,CAACJ,CAAC,GAAG,CAAC,EAAEC,CAAC,EAAEK,YAAY,CAAC;MAChCF,QAAQ,CAACJ,CAAC,GAAG,CAAC,EAAEC,CAAC,EAAEK,YAAY,CAAC;MAChCF,QAAQ,CAACJ,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEK,YAAY,CAAC;MAChCF,QAAQ,CAACJ,CAAC,EAAEC,CAAC,GAAG,CAAC,EAAEK,YAAY,CAAC;;MAEhC;MACA,OAAOA,YAAY;IACrB,CAAC,CAAC;EACJ;;EAEA;;EAEA,IAAIf,MAAM,CAAC,CAAC,EAAE;IACZ,oBACElB,OAAA,CAAAE,SAAA;MAAAiC,QAAA,eACEnC,OAAA;QAAAmC,QAAA,EAAI;MAAyB;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI;IAAC,gBAClC,CAAC;EAEP;EACA;;EAEA;;EAEA,oBACEvC,OAAA;IAAAmC,QAAA,eACEnC,OAAA;MAAAmC,QAAA,EACG3B,KAAK,CAACM,GAAG,CAAC,CAACC,GAAG,EAAEyB,QAAQ,kBACvBxC,OAAA;QAAAmC,QAAA,EACGpB,GAAG,CAACD,GAAG,CAAC,CAAC2B,IAAI,EAAEC,QAAQ,kBACtB1C,OAAA,CAACF,IAAI;UAEH6C,iBAAiB,EAAEtB,eAAgB;UACnCuB,KAAK,EAAEH;UACP;QAAA,GAHKC,QAAQ;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAId,CACF;MAAC,GARKC,QAAQ;QAAAJ,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OASb,CACL;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACG;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;;EAGV;AACF;AAAChC,EAAA,CA9FQJ,KAAK;AAAA0C,EAAA,GAAL1C,KAAK;AAgGd,eAAeA,KAAK;AAAC,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}